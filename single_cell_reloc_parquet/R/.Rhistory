countDoesNot, countDoes, DoesProportion, DoesVelocity, Does_FinDiff) %>%
collect() %>%
mutate_at(.vars = cols, as_factor) %>%
mutate(model = map(splits, ~lm(LocScore ~ logAbundnace, data = .)),
augmented = map(model, augment))
library(tidymodels)
install.packages('tidymodels')
glimpse(penguins)
library(tidymodels)
glimpse(penguins)
df = penguins
df_nested <- df %>%
group_by(species) %>%
nest()
penguis_nested <- penguins %>%
group_by(species) %>%
nest()
View(penguis_nested)
View(penguis_nested$data)
View(penguis_nested$data[[1]])
lm(bill_length_mm ~ bill_depth_mm,
data = df)
penguis_lm <- function(df){
lm(bill_length_mm ~ bill_depth_mm,
data = df)
}
penguis_lm <- function(df){
lm(bill_length_mm ~ bill_depth_mm,
data = df)
}
penguis_nested <- penguis_nested %>%
mutate(model = map(data, penguis_lm))
View(penguis_nested)
summary(penguis_nested$model[[1]])
summary(penguis_nested$model[[1]], model_tidy = map(model, tidy))
penguis_nested <- penguis_nested %>%
mutate(model = map(data, penguis_lm),
model_tidy = map(model, tidy))
View(penguis_nested)
summary(penguis_nested$model_tidy[[1]],)
summary(penguis_nested$model_tidy[[1]])
View(penguis_nested$model_tidy[[1]])
penguis_nested <- penguis_nested %>%
mutate(model = map(data, penguis_lm),
model_tidy = map(model, tidy),
model_glance = map(model, glance))
View(penguis_nested$model_glance[[1]])
penguins_m <- penguis_nested %>%
unnest(model_tidy)
View(penguins_m)
penguins_g <- penguis_nested %>%
unnest(model_glance)
View(penguins_m)
View(penguins_g)
#Let's get plot showing linear models in the three groups
penguins_wide <- penguins_m %>%
pivot_wider(names_from = term,
values_from = estimate:model_glance)
View(penguins_wide)
ggplot()+
geom_point(data = penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))
aes(slope = estimate_bill_depth_mm,
intercept = "estimate_(intercept)")
ggplot()+
intercept = 'estimate_(intercept)')
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = 'estimate_(intercept)'))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = 'estimate_(intercept)'))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = estimate_(intercept)))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = `estimate_(Intercept)`))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = `estimate_(Intercept)`,
color = species
))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_segment(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = `estimate_(Intercept)`,
color = species))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = `estimate_(Intercept)`,
color = species))
library(tidymodels)
library(ggExtra)
library(ggpointdensity)
library(dplyr)
library(ggstatsplot)
library(ggsci)
library(dplyr)
library(hrbrthemes)
library(wesanderson)
library(ggsci)
library(gridExtra)
library(scales)
library(stringr)
library(cowplot)
library(forcats)
library(ggpubr)
library(gghighlight)
library(readxl)
library(tidyr)
library(robustbase)
library(emmeans)
library(tidymodels)
library(arrow)
date <- Sys.Date()
setwd("D:/Second Mind/Academic/Project Stuff/Figures")
npg_clrs <-  pal_npg("nrc", alpha = 0.7)(4)
# df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/merged_data_final.parquet")
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = F)
library(robustbase)
library(robcor)
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
group_by(Protein, Frames_post_treatment) %>%
nest()
lin_corr <- function(df){
return(cor.test(.$LogAbundance, .$Loc_Score, method = 'kendall'))
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
return(cor.test(df$LogAbundance, df$Loc_Score, method = 'kendall'))
lin_corr <- function(df){
return(cor.test(df$LogAbundance, df$Loc_Score, method = 'kendall'))
}
colnames(df)
View(df$data[[1]])
lin_corr <- function(df){
return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
df_nested
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = F) %>%
filter(Protein == 'SAE2') %>%
group_by(Protein, Frames_post_treatment) %>%
nest()
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = F) %>%
filter(Protein == 'SAE2') %>%
collect() %>%
group_by(Protein, Frames_post_treatment) %>%
nest()
df
lin_corr <- function(df){
return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
df_nested
View(df_nested$model)
View(df_nested$model[[1]])
performance(df_nested$model[[1]])
library(performance)
performance(df_nested$model[[1]])
library(lme4)
lin_corr <- function(df){
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Abund, z_score_Abund, data = df)
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
rlang::last_trace()
df
df$data[[1]]
colnames(df$data[[1]])
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Loc ~z_score_logAbund, data = df)
lin_corr <- function(df){
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Loc ~z_score_logAbund, data = df)
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df)
lin_corr <- function(df){
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df)
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df %>% filter(Frames_post_treatment == 20))
df
View(df)
View(df$data)
View(df)
df2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
filter(Protein == 'SAE2') %>%
group_by(Protein, Frames_post_treatment)
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df$data[[47]]))
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df$data[[47]])
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos | Frames_post_treatment), data = df$data[[47]])
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos | Frames_post_treatment), data = df2)
tal_m <- lmer(z_score_Loc ~z_score_logAbund + (Unique_pos | Frames_post_treatment), data = df2)
check_model(tal_m)
check_model(tal_m, panel = FALSE)
setwd("D:/Second Mind/Academic/Project Stuff/Figures")
x <- check_model(tal_m)
ggsave("Check_model",x, width = 10, height = 10, dpi = 300)
ggsave("Check_model.pdf",x, width = 10, height = 10, dpi = 300)
x <- check_model(tal_m, panel = F)
ggsave("Check_model.pdf",x, width = 10, height = 10, dpi = 300)
x
check_model(tal_m, panel = F)
df2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
filter(Protein == 'SAE2') %>%
fitler(Frame_post_treatment == 20)
df2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
filter(Protein == 'SAE2') %>%
filter(Frame_post_treatment == 20)
df2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
filter(Protein == 'SAE2') %>%
filter(Frames_post_treatment == 20)
m <-lm(data = df2, z_score_Loc ~z_score_logAbund)
check_model(m)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "D:/Second Mind/Academic/Project Stuff/Figures")
library(ggplot2)
library(ggExtra)
library(arrow)
library(ggpointdensity)
library(dplyr)
library(ggstatsplot)
library(ggsci)
library(dplyr)
library(hrbrthemes)
library(wesanderson)
library(ggsci)
library(gridExtra)
library(scales)
library(stringr)
library(cowplot)
library(ggstatsplot)
library(tidylog)
library(smplot2)
# library(data.table)
date <- Sys.Date()
#Create the color palette for comparison
npg_clrs <-  pal_npg("nrc", alpha = 0.7)(4)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "D:/Second Mind/Academic/Project Stuff/Figures")
library(ggplot2)
library(ggExtra)
library(arrow)
library(ggpointdensity)
library(dplyr)
library(ggstatsplot)
library(ggsci)
library(dplyr)
library(hrbrthemes)
library(wesanderson)
library(ggsci)
library(gridExtra)
library(scales)
library(stringr)
library(cowplot)
library(ggstatsplot)
library(tidylog)
library(smplot2)
# library(data.table)
date <- Sys.Date()
#Create the color palette for comparison
npg_clrs <-  pal_npg("nrc", alpha = 0.7)(4)
#Read in the dataframe with the updated penetrances
penetrances_updated <- read_parquet("D:/ALL_FINAL/Combined_by_perc/penetrance_updated.parquet", col_select = !c("Percentage_reloc_less")) %>%
rename(Percentage_reloc_less = 'updated_yet_perc')
# na.omit()
penetrances_updated$Percentage_reloc = as.integer(penetrances_updated$Percentage_reloc)
penetrances_updated$Percentage_reloc_less = as.integer(penetrances_updated$Percentage_reloc_less)
penetrances_updated$Ho_max = as.integer(penetrances_updated$Ho_max)
df_ddc2 <- penetrances_updated[str_detect(penetrances_updated$Protein, "DDC2"), ]
penetrances_updated = penetrances_updated[!str_detect(penetrances_updated$Protein, "DDC2"), ]
df_ddc2 <- df_ddc2[order(df_ddc2$Percentage_reloc_less),]
df_ddc2$Protein <- factor(df_ddc2$Protein, levels = df_ddc2$Protein)
df_ddc2
pen_compare <- ggscatterstats(
data = penetrances_updated,
y = Percentage_reloc_less,
x = Percentage_reloc,
type = 'nonparametric',
point.args = list(colour= npg_clrs[1]),
# label.var = Protein,
# label.expression = Ho_max > 85 | Percentage_reloc > 85,
xsidehistogram.args = list(fill = npg_clrs[2]),
ysidehistogram.args = list(fill = npg_clrs[3]),
# smooth.line.args = list(fill = npg_clrs[4]),
pakage = 'wesanderson',
palette = "Moonrise3")+
theme_ipsum(base_family = "")
# ggthemes::theme_clean()
pen_compare
ggsave("Comparison_of_Penetrances.png", pen_compare, dpi = 300)
library(ggplot)
library(ggplot)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "D:/Second Mind/Academic/Project Stuff/Figures")
library(ggplot2)
library(ggExtra)
library(arrow)
library(ggpointdensity)
library(dplyr)
library(ggstatsplot)
library(ggsci)
library(dplyr)
library(hrbrthemes)
library(wesanderson)
library(ggsci)
library(gridExtra)
library(scales)
library(stringr)
library(cowplot)
library(ggstatsplot)
library(tidylog)
library(smplot2)
# library(data.table)
date <- Sys.Date()
#Create the color palette for comparison
npg_clrs <-  pal_npg("nrc", alpha = 0.7)(4)
penetrances_w_HUfill<- read_parquet("D:/ALL_FINAL/Combined_by_perc/penetrance_updated.parquet", col_select = c("Protein", "Percentage_reloc", "updated_yet_perc", "MMS_HU_merged_class"))%>%
drop_na() %>%
group_by(MMS_HU_merged_class) %>%
mutate(level = paste0(MMS_HU_merged_class, " (n = ", n(), ")"))
penetrances_w_HU_g <- ggplot(filter(penetrances_w_HUfill, !MMS_HU_merged_class %in% c("cyto; nucleus", "ER foci")), aes (x = Percentage_reloc, y = updated_yet_perc, color = MMS_HU_merged_class))+
geom_point()+
stat_ellipse(type = "t")+
# sm_statCorr(corr_method = 'pearson', show_text = TRUE, text_size = 3)+
sm_statCorr(corr_method = 'kendall', show_text = TRUE, text_size = 3)+
facet_grid(~level)+
# theme(x.text = element_text(angle = 90)
# theme_classic()+
theme(legend.position = "none")
penetrances_w_HU_g
ggsave(sprintf("%s_pen_compartments_wHU.pdf", date), penetrances_w_HU_g, width = 20, height = 10)
ggsave(sprintf("%s_pen_compartments_wHU.eps", date), penetrances_w_HU_g, width = 20, height = 10)
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
groupby("Protien") %>%
summary(max = max("Perc_yet"))
library(tidyverse)
library(moments)
library(ggplot2)
library(wesanderson)
library(ggsci)
library(ggrepel)
library(tidymodels)
library(ggrepel)
library(gt)
library(data.table)
library(forcats)
library(arrow)
library(ggstatsplot)
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
groupby("Protien") %>%
summary(max = max("Perc_yet"))
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protien") %>%
summary(max = max("Perc_yet"))
get_max
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protien") %>%
summary(max = max("Perc_yet")) %>%
collect()
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protien") %>%
summary(max = max("Perc_yet"))
get_max
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protien") %>%
summary(max = max("Perc_yet"))
get_max
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protien") %>%
summarise(max = max("Perc_yet"))
get_max
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protien") %>%
summarise(max = max("Perc_yet"), .by_group = T)
get_max
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protien") %>%
summarise(max = max("Perc_yet"))
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protein") %>%
summarise(max = max("Perc_yet"))
get_max
source("C:/Users/pcnba/Grant Brown's Lab Dropbox/Peter Bartlett/Peter Bartlett Data/Code/single_cell_reloc/single_cell_reloc_parquet/R/SkewandOutliers.R", echo=TRUE)
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) %>%
group_by("Protein") %>%
summarise(max = max("Perc_yet")) %>%
ungroup()
get_max
get_max
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T) # %>%
get_max
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T)%>%
group_by(Protein) %>%
summarise(max = max("Perc_yet")) %>%
ungroup()
get_max
get_max <- read_parquet("D:/ALL_FINAL/Combined_by_perc/new_percs.parquet", as_data_frame =T)%>%
group_by(Protein) %>%
summarise(max = max(Yet_perc)) %>%
ungroup()
get_max
# filter(!(Protein %in% c("DDC2d0218r2p60KO", "DDC2d0224r1", "DDC2d0218r2p80KO", "DDC2d0218r2p20KO")))%>%
# filter(!(Protein %in% c("DDC2d0223r1", "DDC2d0220r1", "DDC2d0218r2p100KO", "DDC2d0222r2")))%>%
reframe(PF_m = median(Percentage_reloc, na.rm = T), PF_s = skewness(Percentage_reloc, na.rm = T), PF_var = var(Percentage_reloc, na.rm = T), PF_sd = sd(Percentage_reloc, na.rm = T),
TC_m = median(updated_yet_perc, na.rm = T), TC_s = skewness(updated_yet_perc, na.rm = T), TC_var = var(updated_yet_perc, na.rm = T), TC_sd = sd(updated_yet_perc, na.rm = T),
count = n(), tc_iqr = IQR(updated_yet_perc, na.rm = T), pf_iqr = IQR(Percentage_reloc, na.rm = T))
df_ddc2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/penetrance_updated_trimmed.parquet", as_data_frame = T) %>%
select(Percentage_reloc, updated_yet_perc, Protein)%>%
filter(Protein %like% 'DDC2')%>%
# filter(!(Protein %in% c("DDC2d0218r2p60KO", "DDC2d0224r1", "DDC2d0218r2p80KO", "DDC2d0218r2p20KO")))%>%
# filter(!(Protein %in% c("DDC2d0223r1", "DDC2d0220r1", "DDC2d0218r2p100KO", "DDC2d0222r2")))%>%
reframe(PF_m = median(Percentage_reloc, na.rm = T), PF_s = skewness(Percentage_reloc, na.rm = T), PF_var = var(Percentage_reloc, na.rm = T), PF_sd = sd(Percentage_reloc, na.rm = T),
TC_m = median(updated_yet_perc, na.rm = T), TC_s = skewness(updated_yet_perc, na.rm = T), TC_var = var(updated_yet_perc, na.rm = T), TC_sd = sd(updated_yet_perc, na.rm = T),
count = n(), tc_iqr = IQR(updated_yet_perc, na.rm = T), pf_iqr = IQR(Percentage_reloc, na.rm = T))
df_ddc2
sig <- c('C>G', 'C>T', 'C>T', 'C>G')
fwd <- c('Fwd', 'Fwd', 'Fwd', 'Fwd')
rev <- c('Rev', 'Rev', 'Rev', 'Rev')
df <- data.frame(sig, fwd, rev)
df
library(dplyr)
library(purrr)
function f_choose(sel_col, forward, reverse){
f_choose <- function(sel_col, forward, reverse){
if sel_col == 'C>T'{
f_choose <- function(sel_col, forward, reverse){
if (sel_col == 'C>T'){
return(col_1)
}
elif (sel_col == 'C>G'){
f_choose <- function(sel_col, forward, reverse){
if (sel_col == 'C>T'){
return(col_1)
}else if (sel_col == 'C>G'){
return(col_2)
}
}
library(dplyr)
library(purrr)
cols_provide = list('trans', 'Forward', 'Reverse') # list of columns in order
df_strand_chosen <- df %>%
mutate(new_column = pmap(cols_provide, f_choose))
df_strand_chosen
df_strand_chosen <- df %>%
mutate(new_column = pmap(cols_provide, f_choose))
df_strand_chosen
df_strand_chosen <- df %>%
mutate(new_column = pmap(list(sig, fwd, rev), f_choose))
f_choose <- function(sel_col, forward, reverse){
if (sel_col == 'C>T'){
return(forward)
}else if (sel_col == 'C>G'){
return(reverse)
}
}
df_strand_chosen <- df %>%
mutate(new_column = pmap(list(sig, fwd, rev), f_choose))
df_strand_chosen
version
plot_grid(complex_velocity(df_input = df_for_facet_abundance, frame = 0, protein = 'RMI1', space = 8,norm = FALSE),
complex_velocity(df_input = df_for_facet_abundance, frame = 8, protein = 'RMI1', space = 8,norm = FALSE),
complex_velocity(df_input = df_for_facet_abundance, frame = 16,protein = 'RMI1', space = 8, norm = FALSE),
complex_velocity(df_input = df_for_facet_abundance, frame = 24,protein = 'RMI1', space = 8, norm = FALSE),
complex_velocity(df_input = df_for_facet_abundance, frame = 30,protein = 'RMI1', space = 8, norm = FALSE),
labels = "AUTO", align = "h")
