# Set the variables to factors
mutate(Relocalized = as_factor(Relocalized)) %>%
mutate(Yet = as_factor(Yet)) %>%
mutate(Frames_post_treatment = as_factor(Frames_post_treatment))
#* This is a new version with a sina plot
paired_t_test_swarm <- ggwithinstats(
#Drop duplicate frames_post_treatment
data = filter(smaller, Cell_Barcode %in% (smaller[smaller$Frames_post_treatment == tail(smaller$Frames_post_treatment, n = 1),]$Cell_Barcode),
Cell_Barcode %in% (smaller[smaller$Frames_post_treatment == head(smaller$Frames_post_treatment, n = 1),]$Cell_Barcode)),
x = Frames_post_treatment,
y = Loc_score,
# points.color.palette = "Set1", # You can specify your desired color palette here
# boxplot.args = list(fill = "white", width = 'area'),
violin.args = list(width = 0),
# violin.args = list(alpha = 0.2, na.rm = TRUE, scale = 'area'),
point.args = list(size = 0)
# point.args = list(position = ggplot2::position_jitterdodge(dodge.width = 0.6), alpha = 0.4, size = 3, stroke = 0, na.rm = TRUE)
# title = "Group Comparison",
# xlab = "Group",
# ylab = "Variable"
# geom_point(data, mapping = aes(colour = color_variable), inherit.aes = TRUE, position = "jitter", show.legend = TRUE)+
)+
geom_sina(data  = filter(smaller, Cell_Barcode %in% (smaller[smaller$Frames_post_treatment == tail(smaller$Frames_post_treatment, n = 1),]$Cell_Barcode),
Cell_Barcode %in% (smaller[smaller$Frames_post_treatment == head(smaller$Frames_post_treatment, n = 1),]$Cell_Barcode))
, mapping = aes(color = Yet, group = Frames_post_treatment), inherit.aes = T, size = 2, alpha = 0.6, scale = 'count')+
ggtitle(protein)
# geom_violin(data, mapping = aes(fill = group), inherit.aes = T, scale = 'count', alpha = 0.2)+
ggsave(paste0(protein, date, "paired_t_test_swarm.pdf"), plot = paired_t_test_swarm, width = 12, height = 9, device = cairo_pdf)
ggsave(paste0(protein, date, "paired_t_test_swarm.eos"), plot = paired_t_test_swarm, width = 12, height = 9, device = cairo_pdf)
}
#####
facet_attempt <- function (proteien, len_end){
smaller <- data %>%
select(Cell_Barcode, Frames_post_treatment, Loc_score, MMS_localization_class, Protein, Relocalized, Yet) %>%
filter((Frames_post_treatment >= 0 ) & (Protein == protein)) %>%
# This is workable right now
collect() %>%
filter(Frames_post_treatment %in% seq(0, len_end, length.out = n_samples)) %>%
# Set the variables to factors
mutate(Relocalized = as_factor(Relocalized)) %>%
mutate(Yet = as_factor(Yet)) %>%
mutate(Frames_post_treatment = as_factor(Frames_post_treatment))
facet_loc_graph <- smaller %>%
group_by(Frames_post_treatment, Yet) %>%
{ggplot(smaller, aes(x = Yet, y = Loc_score)) +
# geom_violin(aes(fill = Yet), scale = 'width')+
# geom_point(aes(fill = Relocalized), position = position_jitterdodge(jitter.width = 2, dodge.width = 0.2)) +
geom_boxplot(aes(group = Yet, fill = Yet), notch = T, alpha = 0.4)+
geom_violin(aes(group = Yet), scale = 'width', color = npg_clrs[4], fill = NA) +
geom_sina(aes(color = Relocalized, group = Yet), scale = 'width', jitter_y = F) +
scale_fill_npg()+
scale_color_npg()+
# scale_y_log10(limits = c(0.9,2)) +
# theme_ipsum() +
# theme_minimal()+
theme(legend.position = "bottom") +
labs(title = "ECO1", y = "Loc_score")+
scale_x_discrete("Frames_post_treatment", labels = c(
"0" = "Has not",
"1" = "Has relocalized far"
))+
theme_light(base_family = "Arial")+
# labels = c(paste0("Not Yet (", .$CurrNotYet, ")"), paste0("Yes (", .$CurrYet), ")"))+
# subtitle = results_data$expression[[1]] +
facet_grid(rows = NULL, cols = vars(Frames_post_treatment), scale = "free_x")+
ggtitle(protein)}
ggsave(paste0(protein, date, "_loc_score.pdf"), plot = facet_loc_graph, width = 12, height = 9, device = cairo_pdf)
ggsave(paste0(protein, date, "_loc_score.eps"), plot = facet_loc_graph, width = 12, height = 9, device = cairo_pdf)
}
# paired_t_test(protein = 'EXO1', len_end = 32)
# paired_t_test(protein = 'FLR1', len_end = 32)
# paired_t_test(protein = 'ECO1', len_end = 32)
unpaired_comparison(protein = 'EXO1', len_end = 32)
unpaired_comparison(protein = 'FLR1', len_end = 32)
unpaired_comparison(protein = 'ECO1', len_end = 32)
regular_grouped_stats(protein = 'EXO1', len_end = 32)
regular_grouped_stats(protein = 'FLR1', len_end = 32)
regular_grouped_stats(protein = 'ECO1', len_end = 32)
unpaired_group_comparison(protein = 'EXO1', len_end = 32)
unpaired_group_comparison(protein = 'FLR1', len_end = 32)
unpaired_group_comparison(protein = 'ECO1', len_end = 32)
between_sina(protein = 'EXO1', len_end = 32)
between_sina(protein = 'FLR1', len_end = 32)
between_sina(protein = 'ECO1', len_end = 32)
paired_t_test(protein = 'EXO1', len_end = 32)
paired_t_test(protein = 'FLR1', len_end = 32)
paired_t_test(protein = 'ECO1', len_end = 32)
paired_swarm(protein = 'EXO1', len_end = 32)
paired_swarm(protein = 'FLR1', len_end = 32)
paired_swarm(protein = 'ECO1', len_end = 32)
facet_attempt(protein = 'EXO1', len_end = 32)
facet_attempt <- function (protein, len_end){
smaller <- data %>%
select(Cell_Barcode, Frames_post_treatment, Loc_score, MMS_localization_class, Protein, Relocalized, Yet) %>%
filter((Frames_post_treatment >= 0 ) & (Protein == protein)) %>%
# This is workable right now
collect() %>%
filter(Frames_post_treatment %in% seq(0, len_end, length.out = n_samples)) %>%
# Set the variables to factors
mutate(Relocalized = as_factor(Relocalized)) %>%
mutate(Yet = as_factor(Yet)) %>%
mutate(Frames_post_treatment = as_factor(Frames_post_treatment))
facet_loc_graph <- smaller %>%
group_by(Frames_post_treatment, Yet) %>%
{ggplot(smaller, aes(x = Yet, y = Loc_score)) +
# geom_violin(aes(fill = Yet), scale = 'width')+
# geom_point(aes(fill = Relocalized), position = position_jitterdodge(jitter.width = 2, dodge.width = 0.2)) +
geom_boxplot(aes(group = Yet, fill = Yet), notch = T, alpha = 0.4)+
geom_violin(aes(group = Yet), scale = 'width', color = npg_clrs[4], fill = NA) +
geom_sina(aes(color = Relocalized, group = Yet), scale = 'width', jitter_y = F) +
scale_fill_npg()+
scale_color_npg()+
# scale_y_log10(limits = c(0.9,2)) +
# theme_ipsum() +
# theme_minimal()+
theme(legend.position = "bottom") +
labs(title = "ECO1", y = "Loc_score")+
scale_x_discrete("Frames_post_treatment", labels = c(
"0" = "Has not",
"1" = "Has relocalized far"
))+
theme_light(base_family = "Arial")+
# labels = c(paste0("Not Yet (", .$CurrNotYet, ")"), paste0("Yes (", .$CurrYet), ")"))+
# subtitle = results_data$expression[[1]] +
facet_grid(rows = NULL, cols = vars(Frames_post_treatment), scale = "free_x")+
ggtitle(protein)}
ggsave(paste0(protein, date, "_loc_score.pdf"), plot = facet_loc_graph, width = 12, height = 9, device = cairo_pdf)
ggsave(paste0(protein, date, "_loc_score.eps"), plot = facet_loc_graph, width = 12, height = 9, device = cairo_pdf)
}
facet_attempt(protein = 'EXO1', len_end = 32)
facet_attempt(protein = 'FLR1', len_end = 32)
facet_attempt(protein = 'ECO1', len_end = 32)
# df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/merged_data_final.parquet")
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = F)
prot_t <- df %>%
filter(Frames_post_treatment >= 0) %>%
select(MMS_localization_class, HU_localization_class, MMS_HU_merged_class, Cell_Barcode, Date,
Unique_Frame, Protein, Is_treated, Frames_post_treatment, Unique_pos,
Loc_score, Relocalized, Abundance, log_Abundance, log_Loc_score, z_score_Loc,
z_score_Abund, z_score_logLoc, z_score_logAbund, Progen_bud, Yet, Does, When, Yes_yet,
No_yet, pres_end, LogAbundance, CurrNot, CurrYes, currProportion, RelocVelocity,
RelocAcceleration, CurrNotYet, CurrYet, currYetProportion, YetVelocity, YetAcceleration,
countDoesNot, countDoes, DoesProportion, DoesVelocity, Does_FinDiff) %>%
collect() %>%
mutate_at(.vars = cols, as_factor) %>%
mutate(model = map(splits, ~lm(LocScore ~ logAbundnace, data = .)),
augmented = map(model, augment))
cols <- c('MMS_localization_class', 'HU_localization_class', 'MMS_HU_merged_class', 'Cell_Barcode', 'Date',
'Unique_Frame', 'Protein', 'Is_treated', 'Frames_post_treatment', 'Unique_pos',
'Loc_score', 'Relocalized', 'Progen_bud', 'Yet', 'Does', 'When')
prot_t <- df %>%
filter(Frames_post_treatment >= 0) %>%
select(MMS_localization_class, HU_localization_class, MMS_HU_merged_class, Cell_Barcode, Date,
Unique_Frame, Protein, Is_treated, Frames_post_treatment, Unique_pos,
Loc_score, Relocalized, Abundance, log_Abundance, log_Loc_score, z_score_Loc,
z_score_Abund, z_score_logLoc, z_score_logAbund, Progen_bud, Yet, Does, When, Yes_yet,
No_yet, pres_end, LogAbundance, CurrNot, CurrYes, currProportion, RelocVelocity,
RelocAcceleration, CurrNotYet, CurrYet, currYetProportion, YetVelocity, YetAcceleration,
countDoesNot, countDoes, DoesProportion, DoesVelocity, Does_FinDiff) %>%
collect() %>%
mutate_at(.vars = cols, as_factor) %>%
mutate(model = map(splits, ~lm(LocScore ~ logAbundnace, data = .)),
augmented = map(model, augment))
library(purr)
library(purrr)
prot_t <- df %>%
filter(Frames_post_treatment >= 0) %>%
select(MMS_localization_class, HU_localization_class, MMS_HU_merged_class, Cell_Barcode, Date,
Unique_Frame, Protein, Is_treated, Frames_post_treatment, Unique_pos,
Loc_score, Relocalized, Abundance, log_Abundance, log_Loc_score, z_score_Loc,
z_score_Abund, z_score_logLoc, z_score_logAbund, Progen_bud, Yet, Does, When, Yes_yet,
No_yet, pres_end, LogAbundance, CurrNot, CurrYes, currProportion, RelocVelocity,
RelocAcceleration, CurrNotYet, CurrYet, currYetProportion, YetVelocity, YetAcceleration,
countDoesNot, countDoes, DoesProportion, DoesVelocity, Does_FinDiff) %>%
collect() %>%
mutate_at(.vars = cols, as_factor) %>%
mutate(model = map(splits, ~lm(LocScore ~ logAbundnace, data = .)),
augmented = map(model, augment))
library(tidymodels)
install.packages('tidymodels')
glimpse(penguins)
library(tidymodels)
glimpse(penguins)
df = penguins
df_nested <- df %>%
group_by(species) %>%
nest()
penguis_nested <- penguins %>%
group_by(species) %>%
nest()
View(penguis_nested)
View(penguis_nested$data)
View(penguis_nested$data[[1]])
lm(bill_length_mm ~ bill_depth_mm,
data = df)
penguis_lm <- function(df){
lm(bill_length_mm ~ bill_depth_mm,
data = df)
}
penguis_lm <- function(df){
lm(bill_length_mm ~ bill_depth_mm,
data = df)
}
penguis_nested <- penguis_nested %>%
mutate(model = map(data, penguis_lm))
View(penguis_nested)
summary(penguis_nested$model[[1]])
summary(penguis_nested$model[[1]], model_tidy = map(model, tidy))
penguis_nested <- penguis_nested %>%
mutate(model = map(data, penguis_lm),
model_tidy = map(model, tidy))
View(penguis_nested)
summary(penguis_nested$model_tidy[[1]],)
summary(penguis_nested$model_tidy[[1]])
View(penguis_nested$model_tidy[[1]])
penguis_nested <- penguis_nested %>%
mutate(model = map(data, penguis_lm),
model_tidy = map(model, tidy),
model_glance = map(model, glance))
View(penguis_nested$model_glance[[1]])
penguins_m <- penguis_nested %>%
unnest(model_tidy)
View(penguins_m)
penguins_g <- penguis_nested %>%
unnest(model_glance)
View(penguins_m)
View(penguins_g)
#Let's get plot showing linear models in the three groups
penguins_wide <- penguins_m %>%
pivot_wider(names_from = term,
values_from = estimate:model_glance)
View(penguins_wide)
ggplot()+
geom_point(data = penguins,
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))
aes(slope = estimate_bill_depth_mm,
intercept = "estimate_(intercept)")
ggplot()+
intercept = 'estimate_(intercept)')
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = 'estimate_(intercept)'))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = 'estimate_(intercept)'))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = estimate_(intercept)))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = `estimate_(Intercept)`))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = `estimate_(Intercept)`,
color = species
))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_segment(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = `estimate_(Intercept)`,
color = species))
ggplot()+
geom_point(data = penguins, #Get around unnesting by using the original dataset
aes(x = bill_depth_mm,
y = bill_length_mm,
color = species))+
geom_abline(data = penguins_wide,
aes(slope = estimate_bill_depth_mm,
intercept = `estimate_(Intercept)`,
color = species))
library(tidymodels)
library(ggExtra)
library(ggpointdensity)
library(dplyr)
library(ggstatsplot)
library(ggsci)
library(dplyr)
library(hrbrthemes)
library(wesanderson)
library(ggsci)
library(gridExtra)
library(scales)
library(stringr)
library(cowplot)
library(forcats)
library(ggpubr)
library(gghighlight)
library(readxl)
library(tidyr)
library(robustbase)
library(emmeans)
library(tidymodels)
library(arrow)
date <- Sys.Date()
setwd("D:/Second Mind/Academic/Project Stuff/Figures")
npg_clrs <-  pal_npg("nrc", alpha = 0.7)(4)
# df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/merged_data_final.parquet")
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = F)
library(robustbase)
library(robcor)
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
group_by(Protein, Frames_post_treatment) %>%
nest()
lin_corr <- function(df){
return(cor.test(.$LogAbundance, .$Loc_Score, method = 'kendall'))
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
return(cor.test(df$LogAbundance, df$Loc_Score, method = 'kendall'))
lin_corr <- function(df){
return(cor.test(df$LogAbundance, df$Loc_Score, method = 'kendall'))
}
colnames(df)
View(df$data[[1]])
lin_corr <- function(df){
return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
df_nested
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = F) %>%
filter(Protein == 'SAE2') %>%
group_by(Protein, Frames_post_treatment) %>%
nest()
df <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = F) %>%
filter(Protein == 'SAE2') %>%
collect() %>%
group_by(Protein, Frames_post_treatment) %>%
nest()
df
lin_corr <- function(df){
return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
df_nested
View(df_nested$model)
View(df_nested$model[[1]])
performance(df_nested$model[[1]])
library(performance)
performance(df_nested$model[[1]])
library(lme4)
lin_corr <- function(df){
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Abund, z_score_Abund, data = df)
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
rlang::last_trace()
df
df$data[[1]]
colnames(df$data[[1]])
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Loc ~z_score_logAbund, data = df)
lin_corr <- function(df){
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Loc ~z_score_logAbund, data = df)
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df)
lin_corr <- function(df){
# return(cor.test(df$z_score_Abund, df$z_score_Abund, method = 'kendall'))
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df)
}
df_nested <- df %>%
mutate(model = map(data, lin_corr))
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df %>% filter(Frames_post_treatment == 20))
df
View(df)
View(df$data)
View(df)
df2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
filter(Protein == 'SAE2') %>%
group_by(Protein, Frames_post_treatment)
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df$data[[47]]))
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos), data = df$data[[47]])
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos | Frames_post_treatment), data = df$data[[47]])
lmer(z_score_Loc ~z_score_logAbund + (Unique_pos | Frames_post_treatment), data = df2)
tal_m <- lmer(z_score_Loc ~z_score_logAbund + (Unique_pos | Frames_post_treatment), data = df2)
check_model(tal_m)
check_model(tal_m, panel = FALSE)
setwd("D:/Second Mind/Academic/Project Stuff/Figures")
x <- check_model(tal_m)
ggsave("Check_model",x, width = 10, height = 10, dpi = 300)
ggsave("Check_model.pdf",x, width = 10, height = 10, dpi = 300)
x <- check_model(tal_m, panel = F)
ggsave("Check_model.pdf",x, width = 10, height = 10, dpi = 300)
x
check_model(tal_m, panel = F)
df2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
filter(Protein == 'SAE2') %>%
fitler(Frame_post_treatment == 20)
df2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
filter(Protein == 'SAE2') %>%
filter(Frame_post_treatment == 20)
df2 <- read_parquet("D:/ALL_FINAL/Combined_by_perc/Loc_data_comp_merged_everything.parquet", as_data_frame = T) %>%
filter(Protein == 'SAE2') %>%
filter(Frames_post_treatment == 20)
m <-lm(data = df2, z_score_Loc ~z_score_logAbund)
check_model(m)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "D:/Second Mind/Academic/Project Stuff/Figures")
library(ggplot2)
library(ggExtra)
library(arrow)
library(ggpointdensity)
library(dplyr)
library(ggstatsplot)
library(ggsci)
library(dplyr)
library(hrbrthemes)
library(wesanderson)
library(ggsci)
library(gridExtra)
library(scales)
library(stringr)
library(cowplot)
library(ggstatsplot)
library(tidylog)
library(smplot2)
# library(data.table)
date <- Sys.Date()
#Create the color palette for comparison
npg_clrs <-  pal_npg("nrc", alpha = 0.7)(4)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir = "D:/Second Mind/Academic/Project Stuff/Figures")
library(ggplot2)
library(ggExtra)
library(arrow)
library(ggpointdensity)
library(dplyr)
library(ggstatsplot)
library(ggsci)
library(dplyr)
library(hrbrthemes)
library(wesanderson)
library(ggsci)
library(gridExtra)
library(scales)
library(stringr)
library(cowplot)
library(ggstatsplot)
library(tidylog)
library(smplot2)
# library(data.table)
date <- Sys.Date()
#Create the color palette for comparison
npg_clrs <-  pal_npg("nrc", alpha = 0.7)(4)
#Read in the dataframe with the updated penetrances
penetrances_updated <- read_parquet("D:/ALL_FINAL/Combined_by_perc/penetrance_updated.parquet", col_select = !c("Percentage_reloc_less")) %>%
rename(Percentage_reloc_less = 'updated_yet_perc')
# na.omit()
penetrances_updated$Percentage_reloc = as.integer(penetrances_updated$Percentage_reloc)
penetrances_updated$Percentage_reloc_less = as.integer(penetrances_updated$Percentage_reloc_less)
penetrances_updated$Ho_max = as.integer(penetrances_updated$Ho_max)
df_ddc2 <- penetrances_updated[str_detect(penetrances_updated$Protein, "DDC2"), ]
penetrances_updated = penetrances_updated[!str_detect(penetrances_updated$Protein, "DDC2"), ]
df_ddc2 <- df_ddc2[order(df_ddc2$Percentage_reloc_less),]
df_ddc2$Protein <- factor(df_ddc2$Protein, levels = df_ddc2$Protein)
df_ddc2
pen_compare <- ggscatterstats(
data = penetrances_updated,
y = Percentage_reloc_less,
x = Percentage_reloc,
type = 'nonparametric',
point.args = list(colour= npg_clrs[1]),
# label.var = Protein,
# label.expression = Ho_max > 85 | Percentage_reloc > 85,
xsidehistogram.args = list(fill = npg_clrs[2]),
ysidehistogram.args = list(fill = npg_clrs[3]),
# smooth.line.args = list(fill = npg_clrs[4]),
pakage = 'wesanderson',
palette = "Moonrise3")+
theme_ipsum(base_family = "")
# ggthemes::theme_clean()
pen_compare
ggsave("Comparison_of_Penetrances.png", pen_compare, dpi = 300)
library(ggplot)
library(ggplot)
